# -*- coding: utf-8 -*-
"""Spam Mail Predition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17qkumbGwuj8loBHHVJpIUbiaZfJKMvPy
"""

# Spam Mail Prediction using Logistic Regression

# 1. Install and Import Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc

# 2. Load Dataset
# We'll use the SMS Spam Collection dataset from UCI (available via Kaggle too)
# If running on Colab, first upload file:
# from google.colab import files
# uploaded = files.upload()

# Dataset should be a csv with columns ["label","message"]
# Example: spam/ham classification dataset (spam.csv)
url = "https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv"
data = pd.read_csv(url, sep="\t", header=None, names=["label", "message"])

print("Dataset shape:", data.shape)
print(data.head())

# 3. Encode Labels (ham = 0, spam = 1)
data["label_num"] = data["label"].map({"ham":0, "spam":1})

# 4. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    data["message"], data["label_num"], test_size=0.2, random_state=42, stratify=data["label_num"]
)

# 5. Feature Extraction using TF-IDF
vectorizer = TfidfVectorizer(stop_words="english", max_features=3000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

print("TF-IDF shape:", X_train_tfidf.shape)

# 6. Train Logistic Regression Model
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train_tfidf, y_train)

# 7. Predictions
y_pred = clf.predict(X_test_tfidf)
y_proba = clf.predict_proba(X_test_tfidf)[:,1]

# 8. Evaluation Metrics
print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Ham","Spam"], yticklabels=["Ham","Spam"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6,5))
plt.plot(fpr, tpr, color="blue", label=f"Logistic Regression (AUC={roc_auc:.3f})")
plt.plot([0,1],[0,1], linestyle="--", color="red", label="Chance")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.grid(True)
plt.show()

